@startuml classDiagram
class Bestiole{
  -{static} const double: AFF_SIZE
  -{static} const double: MAX_VITESSE
  -{static} const double: LIMITE_VUE
  -{static} int: next
  -int: identite
  -vector2: pos
  -vector2: cumulPos

  -double: orientation
  -double: base_vitesse
  -double: base_armour
  -double: base_stealth
  -T*: couleur

  -bool: stillInCollision

  -Sensor*: sensor_
  -Behvaiour*: Behaviour_
  -Accessory*: accessory_

  +bool: markedToDie
  +bool: markedToClone
  +bool: stillInCollision
  +int: lastCollWith

  +Bestiole(Sensor* const sensor ,Behaviour* const behaviour,Accessory* const accessory)
  +Bestiole(const Bestiole& b)
  +~Bestiole()

  -bouge(int:xLim, int:yLim):void
  +action(Milieu &monMilieu):void
  +draw(UImg & support)
  +jeTeVois(const Bestiole & b):bool
  +initCoords(int xLim, int yLim):void
  +setCoords(double x, double y):void

  +operator==(const Bestiole & b1,const Bestiole & b2):bool
  +setOrientationDeg(double angle):void
  +getOrientationRad():double
  +getAFF_SIZE():double
  +getPosition():vector2
  +getAngleDeg():double
  +getColeur() T*

  +initState():void
  +getSensor():Sensor*
  +getBehaviour():Beheaviour*
  +getAccessory():Acessory*

  +ocurredCollision(Bestiole &b):bool
  +checkCollisions(Mileu &monMilieu):void
  +getIdentite():int
  +getFinalSpeed():double
  +getFinalArmor():double
  +getFinalStealth():double

  +changeBehaviour(Behaviour* newBehaviour):void
  +drawVisionCone(UImg & support,const Bestiole & b,double orientation, math::vector2 relativePos):void
  operator<<(ostream& os, Bestiole& b):ostream&
}

interface Component{
  # Bestiole*: owner
  # const string: name_
  +Component(string name)
  +~Component()
  +setOwner(Bestiole* ownr):void
  +clone(Bestiole* ownr):Component*
  +getOwner():Bestiole*
  +Draw(UImg & support):void
  +const getName():string
}

enum enum_Behavior{
Dumb
Spinner
Braindead 
Gregaire 
Kamikaze
Peureuse
Prevoyante
Psycho
}

enum enum_Sensor{
  Eyes
  Ears
  CompositeSensor
}

enum enum_Accessory{
  TurboJet
  Cloak
  Shield
  Empty
}

class vec2{
  +contrainAngle(double x): double
  +rad2Deg(double x): double
  +deg2Rad(double x):double
}

interface Behaviour {
  <<friend>> Bestiole
  # double: angle_rad
  # double: speedMod
  # T: color_[3]

  +Behaviour(const string name)
  +~Behaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr):Behaviour

  +getAngleRad():double
  +getSpeed():double
  getColor(): T*
}

class Sensor{
  +Sensor(const string name)
  +~Sensor()
  +canSense(const Bestiole &b2):bool
  +clone(Bestiole* ownr):Sensor*
}

class Accessory{
  #double: speed_mod_
  #double: armor_mod_
  #double: stealh_mod_
  #T: color_[3]

  +Acessory(const string name)
  +~Acessory()
  +getSpeedMod():double
  +getArmorMod():double
  +getStealthMod():double
  +clone(Bestiole* ownr):Accessory*
  +Draw(UImg & support): void
}

Bestiole *-- Component
Bestiole ..> enum_Behavior
Bestiole ..> enum_Accessory
Bestiole ..> enum_Sensor
Bestiole --> vec2
Component<|-- Behaviour
Component <|-- Sensor
Component<|--Accessory

@enduml