@startuml classDiagram

class main
{
+main(int argc, char** argv):int
}

class BestioleFactory
{
  +{static}Milieu: *milieu_

  +{static}createBestiole(enum_Behavior selected_behaviour,enum_Sensor selected_sensor,enum_Accessory selected_accessory):shared_ptr<Bestiole>
  +{static}createBestioleClone(Bestiole& b):shared_ptr<Bestiole>

  +{static}createRandomeBestiole():shared_ptr<Bestiole>
  +{static}createRandomBehaviour(): Behaviour*

  -{static}createBehaviour(enum_Behavior selected_behaviour):Behaviour
  -{static}createSensor(enum_Sensor selected_sensor):Sensor
  -{static}createAccessory(enum_Accessory selected_accessory):Accessory
}

class Milieu {
  -int: width
  -int: height
  -vector<shared_ptr<Bestiole>>: listeBestioles
  
  +int deathByCollisions
  +int naturalDeaths
  +int births
  +int clones

  +Milieu(int _width, int _height)
  +~Milieu()
  +getWidth():int
  +getHeight():int
  +step():void
  +addMember(shared_ptr<Bestiole> b):void
  +nbVoisins(Bestiole* b):int
  getBestiolesList():vector<shared_ptr<Bestiole>>&
  +applyDeath():void
  +operator<<(): ostream&
  +shouldDie(Bestiole b):bool
}


class Aquarium{
  -Milieu:*flotte
  -int:delay
  -int:currentStep

  +int:screenWidth
  +int:screenHeigth
  
  +Aquarium(int width, int height, int _delay)
  +~Aquarium()

  +getMilieu(): Milieu&
  +run():void
  +waitForKey(): int
  +saveState(fstream& MyFile):void
  +saveBilan():void
}

enum enum_Behavior{
Dumb
Spinner
Braindead 
Gregaire 
Kamikaze
Peureuse
Prevoyante
Psycho
}

enum enum_Sensor{
  Eyes
  Ears
  CompositeSensor
}

enum enum_Accessory{
  TurboJet
  Cloak
  Shield
  Empty
}

class Accessory{
  #double: speed_mod_
  #double: armor_mod_
  #double: stealh_mod_
  #T: color_[3]

  +Acessory(const string name)
  +~Acessory()
  +getSpeedMod():double
  +getArmorMod():double
  +getStealthMod():double
  +clone(Bestiole* ownr):Accessory*
  +Draw(UImg & support): void
}


class Cloak{
  +Cloak()
  +~Cloak()
  +clone(Bestiole* ownr): Cloak*
}

class Empty{
  +Empty()
  +~Empty()
  clone(Bestiole* ownr): Empty*
  +Draw(UImg & support): void
}

class TurboJet{
  +TurboJet()
  +~TurboJet()
  clone(Bestiole* ownr): TurboJet* 
}

class Shield{
  +Shield()
  +~Shield()
  clone(Bestiole* ownr): Shield* 
}

interface Component{
  # Bestiole*: owner
  # const string: name_
  +Component(string name)
  +~Component()
  +setOwner(Bestiole* ownr):void
  +clone(Bestiole* ownr):Component*
  +getOwner():Bestiole*
  +Draw(UImg & support):void
  +const getName():string
}

class Sensor{
  +Sensor(const string name)
  +~Sensor()
  +canSense(const Bestiole &b2):bool
  +clone(Bestiole* ownr):Sensor*
}

class Ears {
  -double: detection_capacity
  -double: max_dist

  +Ears()
  +Ears(const Ears &ear)
  +~Ears()
  +canSense(Bestiole* &b2):bool
  +clone(Bestiole* ownr):Ears*
  +Draw(UImg&support):void
  +DrawHearingCircle(UImg &support):void
}
class Eyes{
  -double:detection_capacity
  -double:fov_deg
  -double:max_dist

  +Eyes()
  +Eyes(Eyes &eye)
  +~Eyes()
  +canSense(const Bestiole &b2):bool
  +clone(Bestiole* ownr):Eyes*
  +Draw(UImg & support):void
  +DrawVisionCone(UImg &support):void
}

class CompositeSensorÂ {
  -Ears*: ear
  -Eyes*: eye

  +CompositeSensor()
  +CompositeSensor(const CompositeSensor &csensor)
  +~CompositeSensor()
  +canSense(const Bestiole &b2):bool
  +clone(Bestiole* ownr)CompositeSensor*
  +Draw(UImg & support):void
  +DrawCompositeSensor(UImg &support)
  +setOwner(Bestiole* ownr):void
}

interface Behaviour {
  <<friend>> Bestiole
  # double: angle_rad
  # double: speedMod
  # T: color_[3]

  +Behaviour(const string name)
  +~Behaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr):Behaviour

  +getAngleRad():double
  +getSpeed():double
  getColor(): T*
}

class BraindeadBehaviour {
  +BraindeadBehaviour()
  +~BraindeadBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr):BraindeadBehaviour*
}

class DumbBehaviour {
  +DumbBehaviour()
  +~DumbBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr):DumbBehaviour*
}

class GregaireBehaviour{
  +GregaireBehaviour()
  +~GregaireBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr): GregaireBehaviour*
}

class KamikazeBehaviour{
  +KamikazeBehaviour()
  +~KamikazeBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr): KamikazeBehaviour*
}

class PeureuseBehaviour{
  -int: max_neighbours
  -double: speed_factor
  -bool: isEscaping

  +PeureuseBehaviour()
  +~PeureuseBehaviour()

  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr): PeureuseBehaviour*
}

class PrevoyanteBehaviour{
  +PrevoyanteBehaviour()
  +~PrevoyanteBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr):PrevoyanteBehaviour()
}



class SpinnerBehaviour {
  +SpinnerBehaviour()
  +~SpinnerBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +clone(Bestiole* ownr):SpinnerBehaviour*
}

class PsychoBehaviour {
  - DumbBehaviour: dumbBehaviour
  - SpinnerBehaviour: spinnerBehaviour
  - KamikazeBehaviour: kamikazeBehaviour
  - PrevoyanteBehaviour: prevoyanteBehaviour
  - PeureuseBehaviour: peureuseBehaviour
  - GregaireBehaviour: gregaireBehaviour
  - BraindeadBehaviour: braindeadBehaviour
  - Behaviour*: currentBehaviour_

  +PsychoBehaviour()
  +~PsychoBehaviour()
  +calculateDir(Milieu & monMilieu):void
  +setOwner(Bestiole ownr):void
  +clone(Bestiole* ownr):PsachoBehaviour*
}

enum PsycBehvrs{
  psychDumb
  psychSpinner 
  psychBraindead
  psychKamikaze
  psychGregaire
  psychPeureuse
  psychPrevoyante
}


class Bestiole{
  -{static} const double: AFF_SIZE
  -{static} const double: MAX_VITESSE
  -{static} const double: LIMITE_VUE
  -{static} int: next
  -int: identite
  -vector2: pos
  -vector2: cumulPos

  -double: orientation
  -double: base_vitesse
  -double: base_armour
  -double: base_stealth
  -T*: couleur

  -bool: stillInCollision

  -Sensor*: sensor_
  -Behvaiour*: Behaviour_
  -Accessory*: accessory_

  +bool: markedToDie
  +bool: markedToClone
  +bool: stillInCollision
  +int: lastCollWith

  +Bestiole(Sensor* const sensor ,Behaviour* const behaviour,Accessory* const accessory)
  +Bestiole(const Bestiole& b)
  +~Bestiole()

  -bouge(int:xLim, int:yLim):void
  +action(Milieu &monMilieu):void
  +draw(UImg & support)
  +jeTeVois(const Bestiole & b):bool
  +initCoords(int xLim, int yLim):void
  +setCoords(double x, double y):void

  +operator==(const Bestiole & b1,const Bestiole & b2):bool
  +setOrientationDeg(double angle):void
  +getOrientationRad():double
  +getAFF_SIZE():double
  +getPosition():vector2
  +getAngleDeg():double
  +getColeur() T*

  +initState():void
  +getSensor():Sensor*
  +getBehaviour():Beheaviour*
  +getAccessory():Acessory*

  +ocurredCollision(Bestiole &b):bool
  +checkCollisions(Mileu &monMilieu):void
  +getIdentite():int
  +getFinalSpeed():double
  +getFinalArmor():double
  +getFinalStealth():double

  +changeBehaviour(Behaviour* newBehaviour):void
  +drawVisionCone(UImg & support,const Bestiole & b,double orientation, math::vector2 relativePos):void
  operator<<(ostream& os, Bestiole& b):ostream&
}

class vec2{
  +contrainAngle(double x): double
  +rad2Deg(double x): double
  +deg2Rad(double x):double
}


main-->Aquarium

Aquarium-->Milieu
Milieu *-- Bestiole
BestioleFactory ..> Bestiole 
BestioleFactory -- Milieu

Bestiole *-- Component
Bestiole ..> enum_Behavior
Bestiole ..> enum_Accessory
Bestiole ..> enum_Sensor
Bestiole --> vec2

Component <|-- Sensor
Sensor <|-- CompositeSensor
Sensor <|-- Ears
Sensor <|-- Eyes

Component<|-- Behaviour
Behaviour<|-- DumbBehaviour
Behaviour<|-- BraindeadBehaviour
Behaviour<|-- PsychoBehaviour
Behaviour<|-- SpinnerBehaviour
Behaviour<|-- GregaireBehaviour
Behaviour<|-- KamikazeBehaviour
Behaviour<|-- PeureuseBehaviour
Behaviour<|-- PrevoyanteBehaviour
PsychoBehaviour..>PsycBehvrs

PsychoBehaviour *-- Behaviour


Component<|--Accessory
Accessory<|--TurboJet
Accessory<|--Cloak
Accessory<|--Shield
Accessory<|--Empty



@enduml